// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_data is a generated GoMock package.
package mock_data

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockUser) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockUserMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUser)(nil).Name))
}

// SetAge mocks base method
func (m *MockUser) SetAge(age int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAge", age)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetAge indicates an expected call of SetAge
func (mr *MockUserMockRecorder) SetAge(age interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAge", reflect.TypeOf((*MockUser)(nil).SetAge), age)
}

// V mocks base method
func (m *MockUser) V(idx int, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V", idx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V indicates an expected call of V
func (mr *MockUserMockRecorder) V(idx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V", reflect.TypeOf((*MockUser)(nil).V), idx, name)
}
